---
- name: ASA Binary Deployment
  hosts: ASA
  gather_facts: no
  connection: network_cli

  #Author:              Jason A. Sloan
  #Tested OS:           ASA 9.6.4+
  #Tested Models:       5516,5545,5585
  #Tested Modes:        Single Context, Multi Context

  # Known Issue:
  # Due to ASA SSH timeout configuration limitations I am unable to stay connected to the ASA for a period of longer than 60 mins.
  # If the ASA copy operation takes longer than 60 mins, the socket will be forcibly closed by the remote (ASA) side.
  # For this reason smaller binaries are transferred first.
  # The copy operation seems to continue even after the SSH socket is terminated (at least when using tftp).
  # As a workaround you can run the playbook with -t osVerify, sshTimeout to do a verification on the operating system later and reset your SSH timeout

  vars:
          playbook_debug_level: 0
          asaAsdmCopy: "{{ AsdmCopy | default(false) }}"

  tasks:

  - name: Set Maximum SSH timeout
    asa_config:
      lines:
        - ssh timeout 60
    register: _sshTimeoutRemove
    vars:
      ansible_command_timeout: 180
    tags: sshTimeout

  - name: Debug SSH Timeout Removal
    debug:
      var: _sshTimeoutRemove
    when: >
      (playbook_debug_level > 0) or
      (_sshTimeoutRemove is failed)
    tags: sshTimeout

  - name: Switch to [SYSTEM] context
    asa_command:
      commands:
        - changeto system
    register: _asaContextSystem
    vars:
      ansible_command_timeout: 180
    when: asaMulticontext == "true"
    tags: always

############### RECORD CURRENT ASDM ###############
  - name: Get ASDM Setting
    asa_command:
      commands:
        - show asdm image
    register: _asdmShow
    tags: asdmFact

  - name: Debug ASDM Show
    debug:
      var: _asdmShow
      verbosity: 2
    when: _asdmShow is failed
    tags: asdmFact
###################################################

############### SHOW CURRENT ASDM #################
  - name: Set Fact - ASDM Image
    set_fact:
      asaCurrentAsdm: "{{ _asdmShow.stdout[0].split('/')[-1]|trim }}"
    tags: asdmFact

  - name: Display current ASDM Version
    debug:
      var: asaCurrentAsdm
    when: asaCurrentAsdm != ""
    tags: asdmFact
###################################################

############### IMAGE EXISTS ######################
  - name: List Directory for Image Name
    asa_command:
      commands:
        - dir disk0:/{{ asaAsdmImage }}
    register: _asaAsdmDir
    tags: asdmFact

  - name: Set asaAsdmExists to true
    set_fact:
      asaAsdmExists: true
    when: asaAsdmImage in _asaAsdmDir.stdout[0]
    tags: asdmFact

  - name: Set asaAsdmExists to false
    set_fact:
      asaAsdmExists: false
    when: asaAsdmImage not in _asaAsdmDir.stdout[0]
    tags: asdmFact

  - name: asaAsdmExists Value
    debug:
      var: asaAsdmExists
      verbosity: 3
    tags: asdmFact

  - name: asaAsdmCopy Value
    debug:
      var: asaAsdmCopy
      verbosity: 3
    tags: asdmFact
###################################################


############### ASDM COPY OPERATION ###############
  - name: ASDM Copy Block
    block:
      - name: Copy ASDM Image to Disk - "copy /noconfirm {{ asaFileTransport }}://{{ asaFileHost }}/{{ asaAsdmImage }} disk0:/{{ asaAsdmImage }}"
        asa_command:
          commands:
            - copy /noconfirm {{ asaFileTransport }}://{{ asaFileHost }}/{{ asaAsdmImage }} disk0:/{{ asaAsdmImage }}
          wait_for:
            - result[0] contains copied
        register: _asdmDeploy
        vars:
          ansible_command_timeout: 3605
        tags: asdmDeploy
    
      - name: Debug ASDM image deployment when failed
        debug:
          var: _asdmDeploy
        when: >
          (playbook_debug_level > 0) or
          (_asdmDeploy is failed)
        tags: asdmDeploy
  
      - name: List Directory for Image Name
        asa_command:
          commands:
            - dir disk0:/{{ asaAsdmImage }}
        register: _asaAsdmDirCopy
        tags: asdmFact
    
      - name: Set asaAsdmExists to true
        set_fact:
          asaAsdmExists: true
        when:
          - asaAsdmImage in _asaAsdmDirCopy.stdout[0]
          - "_asaAsdmDirCopy.stdout[0]|trim|lower not is search('error')"
        tags: asdmFact
    
      - name: Set asaAsdmExists to false
        set_fact:
          asaAsdmExists: false
        when: >
          (asaAsdmImage not in _asaAsdmDirCopy.stdout[0]) or
          ('error' in _asaAsdmDirCopy.stdout[0]|lower)
        tags: asdmFact
    when: 
      - asaAsdmExists == false
      - asaAsdmCopy == true
    tags: asdmDeploy
############### END ASDM COPY ###############

  - name: Tasks When ASDM Image Exists
    block:
############### IMAGE VERIFY ###############
      - name: Check Image / Rescue with Copy
        block:
          - name: Run Verify For Image - verify disk0:/{{ asaAsdmImage }}
            asa_command:
              commands:
                - verify disk0:/{{ asaAsdmImage }}
            register: _asdmVerify
            failed_when: "'error' in _asdmVerify.stdout[0]|lower"
            tags: asdmVerify
        rescue:
          - name: Verify Error Rescue - copy /noconfirm {{ asaFileTransport }}://{{ asaFileHost }}/{{ asaAsdmImage }} disk0:/{{ asaAsdmImage }}
            asa_command:
              commands:
                - copy /noconfirm {{ asaFileTransport }}://{{ asaFileHost }}/{{ asaAsdmImage }} disk0:/{{ asaAsdmImage }}
              wait_for:
                - result[0] contains copied
            register: _asdmDeploy
            vars:
              ansible_command_timeout: 3605
            tags: asdmDeploy
          # TODO - Re-verify
        ignore_errors: yes
    
      - name: Get Embedded Checksum
        set_fact:
          asdmEmbedded: "{{ item.split(':')[1]|trim }}"
        when:
          - "item|trim|lower is search('embedded')"
        with_items:
          - "{{ _asdmVerify.stdout_lines[0] }}"
        tags: asdmVerify

      - name: Get Computed Checksum
        set_fact:
          asdmComputed: "{{ item.split(':')[1]|trim }}"
        when: "item|trim|lower is search('computed')"
        with_items:
          - "{{ _asdmVerify.stdout_lines[0] }}"
        failed_when: >
          (asdmEmbedded == "") or
          (asdmComputed == "") or
          (asdmEmbedded != asdmComputed)
        tags: asdmVerify

      - name: Debug _asdmVerify.stdout_lines[0]
        debug:
          msg: "line: {{ item }}"
          verbosity: 3
        with_items:
          - "{{ _asdmVerify.stdout_lines[0] }}"
        tags: asdmVerify
   
      - name: Log Passed Checksum
        debug:
          msg: "\nFile checksum OK!\n{{ asdmComputed }}\n"
        when: asdmEmbedded == asdmComputed
        tags: asdmVerify
    
      - name: Log Failed Checksum
        debug:
          msg: "\nasdmEmbedded: {{ asdmEmbedded }}\nasdmComputed: {{ asdmComputed }}\n"
        when: asdmEmbedded != asdmComputed
        tags: asdmVerify
####  ######### END IMAGE VERIFY ###############
      
####  ########### SET ASDM IMAGE ####################
      - name: Set ASDM Image - asdm image disk0:/{{ asaAsdmImage }}
        asa_config:
          lines:
            - asdm image disk0:/{{ asaAsdmImage }}
        register: _asdmConfig
        when: asdmEmbedded == asdmComputed
        failed_when: _asdmConfig is failed
        tags: asdmConfig
    
      - name: Debug Failed verify
        debug:
          var: _asdmConfig
        when: >
          (playbook_debug_level > 3) or
          (_asdmConfig is failed)
        tags: asdmConfig

      - name: Save [SYSTEM] Context Configuration
        asa_command:
          commands:
            - copy /noconfirm running-config startup-config
        vars:
          ansible_command_timeout: 180
        when: asaMulticontext == "true"
        tags: asdmConfig

###################################################

############### END BLOCK CONDITIONAL #############
    when: asaAsdmExists == true
###################################################

  - name: Switch to [ADMIN] context
    asa_command:
      commands:
        - changeto context admin
    register: _asaContextAdmin
    vars:
      ansible_command_timeout: 180
    when: asaMulticontext == "true"
    tags: always

  - name: Set SSH Timeout Back to Desired Value ({{ asaSshTimeout }})
    asa_config:
      lines:
        - ssh timeout {{ asaSshTimeout }}
    register: _sshTimeoutAdd
    vars:
      ansible_command_timeout: 180
    tags: sshTimeout

  - name: Debug setting SSH timeout to {{ asaSshTimeout }} min when failed
    debug:
      var: _sshTimeoutAdd
    when: >
      (playbook_debug_level > 0) or
      (_sshTimeoutAdd is failed)
    tags: sshTimeout

  - name: Save Configuration
    asa_command:
      commands:
        - copy /noconfirm running-config startup-config
    vars:
      ansible_command_timeout: 180
