---
######### IMAGE VERIFY ###############
# Requires:
# asaDrive = storage device to start from (i.e. disk0)
# asaFile = file path and filename of file to verify beginning from root.
#
# Returns / Sets:
# asaFileVerified: True - File check succeeded. / False - File check did not complete successfully.

- name: Set Verified to false
  set_fact:
    asaFileVerified: false
  tags: always

- name: Run Verify For Image - verify {{asaDrive}}:/{{ asaFile }}
  asa_command:
    commands:
      - verify {{asaDrive}}:/{{ asaFile }}
  register: _asaFileVerify
  failed_when: "'error' in _asaFileVerify.stdout[0]|lower"
  tags: always

# TODO - ASA will ouput variable text on signature validation.
# Sometimes just "Signature verified"
# Other versions will display an embedded and computed hash.
# Write a block that looks for signature verified, if not it goes deeper into checksums.

# Basic Validation - Look for signature verified.
- name: Check for Signature Verified
  set_fact:
    asaFileVerified: true
  when: >
    _asaFileVerify.stdout[0] | lower is search("signature verified") or
    _asaFileVerify.stdout[0] | lower is search("signature successfully validated")
  tags: always

- name: Check for Signature ERROR
  set_fact:
    asaFileVerified: false
  when:
    - _asaFileVerify.stdout[0] | lower is search("error")
  tags: always

- name: DEBUG - Signature Verified
  debug:
    msg: "{{ _asaFileVerify.stdout[0] | lower }}"
    # verbosity: 3
  when:
    - asaFileVerified == false
  tags: always

# Basic Validation Univailable - Check for and compare embedded checksums.
- name: Checksum Validation Block
  block:
    - name: Get Embedded Checksum
      set_fact:
        fckEmbedded: "{{ item.split(':')[1]|trim }}"
      when:
        - item|trim|lower is search("embedded")
      with_items:
        - "{{ _asaFileVerify.stdout_lines[0] }}"
      tags: always

    - name: Get Computed Checksum
      set_fact:
        fckComputed: "{{ item.split(':')[1]|trim }}"
      register: _setChecksum
      when: item|trim|lower is search("computed")
      with_items:
        - "{{ _asaFileVerify.stdout_lines[0] }}"
      tags: always

    - name: Unable to find all checksums
      set_fact:
        fileChecks: false
      when: >
        (fckEmbedded is not defined) or
        (fckEmbedded|length == 0) or
        (fckComputed is not defined) or
        (fckComputed|length == 0)
      tags: always

    - name: Checksums found for comparison
      set_fact:
        fileChecks: true
      when:
        - fckEmbedded is defined
        - fckEmbedded|length > 0
        - fckComputed is defined
        - fckComputed|length >0
      tags: always

    - name: Checksum Block
      block:
        - name: Debug _asaFileVerify.stdout_lines[0]
          debug:
            msg: "line: {{ item }}"
            verbosity: 3
          with_items:
            - "{{ _asaFileVerify.stdout_lines[0] }}"
          tags: always
 
        - name: Log Passed Checksum
          debug:
            msg: "\nFile checksum OK!\n{{ fckComputed }}\n"
          when: fckEmbedded == fckComputed
          tags: always
  
        - name: Log Failed Checksum
          debug:
            msg: "\nfckEmbedded: {{ fckEmbedded }}\nfckComputed: {{ fckComputed }}\n"
          when: fckEmbedded != Computed
          tags: always
      
        - name: Set File Verified TRUE if Checksums Equal
          set_fact:
            asaFileVerified: true
          when: fckEmbedded == fckComputed
          tags: always
      when:
        - fileChecks == true

    # Sometimes there is no output on a file verify...
    # If this happens, lets go ahead and assume everything is ok.a
    # Thanks Cisco  <3

    - name: Fix for verification without embedded checksum.
      set_fact:
        asaFileVerified: true
      when:
        - fileChecks == false
        - _asaFileVerify.stdout_lines|length == 1
        - _asaFileVerify.stdout_lines[0]|lower is search("verifying file integrity")
      tags: always

    - name: Debug Conditions
      debug:
        msg: "\nfileChecks: {{ fileChecks }}\nLength: {{_asaFileVerify.stdout_lines|length}}\n {{_asaFileVerify.stdout_lines[0]|lower}}"
        verbosity: 3
      tags: always

  when:
    - asaFileVerified == false

# TODO: Build in validation from calculated checksum against stored variable.
# TODO: Perhaps a dictionary of images with the SHA hashes.
# TODO: Last ditch effort to verify.
# TODO: Will require getting checksums from Cisco Website for images.

######### END FILE VERIFY ###############
